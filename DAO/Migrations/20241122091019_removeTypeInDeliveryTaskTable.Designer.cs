// <auto-generated />
using System;
using DAO;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAO.Migrations
{
    [DbContext(typeof(MmrmsContext))]
    [Migration("20241122091019_removeTypeInDeliveryTaskTable")]
    partial class removeTypeInDeliveryTaskTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObject.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<int?>("AccountBusinessId")
                        .HasColumnType("int");

                    b.Property<string>("AvatarImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateExpire")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirebaseMessageToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("LogId")
                        .HasColumnType("int");

                    b.Property<int?>("MembershipRankId")
                        .HasColumnType("int");

                    b.Property<double?>("MoneySpent")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtpNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TokenDateExpire")
                        .HasColumnType("datetime2");

                    b.Property<string>("TokenRefresh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.HasIndex("MembershipRankId");

                    b.HasIndex("RoleId");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("BusinessObject.AccountBusiness", b =>
                {
                    b.Property<int>("AccountBusinessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountBusinessId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountBusinessId");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasFilter("[AccountId] IS NOT NULL");

                    b.ToTable("AccountBusiness", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("AddressBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Coordinates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId");

                    b.HasIndex("AccountId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Component", b =>
                {
                    b.Property<int>("ComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComponentId"));

                    b.Property<int?>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ComponentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("QuantityOnHold")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ComponentId");

                    b.ToTable("Component", (string)null);
                });

            modelBuilder.Entity("BusinessObject.ComponentReplacementTicket", b =>
                {
                    b.Property<string>("ComponentReplacementTicketId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("AdditionalFee")
                        .HasColumnType("float");

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int");

                    b.Property<double?>("ComponentPrice")
                        .HasColumnType("float");

                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateRepair")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeCreateId")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("MachineSerialNumberComponentId")
                        .HasColumnType("int");

                    b.Property<int?>("MachineTaskCreateId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ComponentReplacementTicketId");

                    b.HasIndex("ComponentId");

                    b.HasIndex("ContractId");

                    b.HasIndex("EmployeeCreateId");

                    b.HasIndex("InvoiceId")
                        .IsUnique()
                        .HasFilter("[InvoiceId] IS NOT NULL");

                    b.HasIndex("MachineSerialNumberComponentId");

                    b.HasIndex("MachineTaskCreateId");

                    b.ToTable("ComponentReplacementTicket", (string)null);
                });

            modelBuilder.Entity("BusinessObject.ComponentReplacementTicketLog", b =>
                {
                    b.Property<int>("ComponentReplacementTicketLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComponentReplacementTicketLogId"));

                    b.Property<int?>("AccountTriggerId")
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComponentReplacementTicketId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.HasKey("ComponentReplacementTicketLogId");

                    b.HasIndex("AccountTriggerId");

                    b.HasIndex("ComponentReplacementTicketId");

                    b.ToTable("ComponentReplacementTicketLog", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Content", b =>
                {
                    b.Property<int>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContentId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("ContentBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContentId");

                    b.HasIndex("AccountId");

                    b.ToTable("Content", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Contract", b =>
                {
                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AccountSignId")
                        .HasColumnType("int");

                    b.Property<string>("BaseContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateSign")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DepositPrice")
                        .HasColumnType("float");

                    b.Property<bool?>("IsExtended")
                        .HasColumnType("bit");

                    b.Property<int?>("RentPeriod")
                        .HasColumnType("int");

                    b.Property<double?>("RentPrice")
                        .HasColumnType("float");

                    b.Property<string>("RentingRequestId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TotalRentPrice")
                        .HasColumnType("float");

                    b.HasKey("ContractId");

                    b.HasIndex("AccountSignId");

                    b.HasIndex("BaseContractId")
                        .IsUnique()
                        .HasFilter("[BaseContractId] IS NOT NULL");

                    b.HasIndex("RentingRequestId");

                    b.HasIndex("SerialNumber");

                    b.ToTable("Contract", (string)null);
                });

            modelBuilder.Entity("BusinessObject.ContractDelivery", b =>
                {
                    b.Property<int>("ContractDeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractDeliveryId"));

                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("DeliveryTaskId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContractDeliveryId");

                    b.HasIndex("ContractId");

                    b.HasIndex("DeliveryTaskId");

                    b.ToTable("ContractDelivery", (string)null);
                });

            modelBuilder.Entity("BusinessObject.ContractPayment", b =>
                {
                    b.Property<int>("ContractPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractPaymentId"));

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CustomerPaidDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("IsFirstRentalPayment")
                        .HasColumnType("bit");

                    b.Property<int?>("Period")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContractPaymentId");

                    b.HasIndex("ContractId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("ContractPayment", (string)null);
                });

            modelBuilder.Entity("BusinessObject.ContractTerm", b =>
                {
                    b.Property<int>("ContractTermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractTermId"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContractTermId");

                    b.HasIndex("ContractId");

                    b.ToTable("ContractTerm", (string)null);
                });

            modelBuilder.Entity("BusinessObject.DeliveryTask", b =>
                {
                    b.Property<int>("DeliveryTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryTaskId"));

                    b.Property<string>("ConfirmationPictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateShip")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeliveryTaskId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("StaffId");

                    b.ToTable("DeliveryTask", (string)null);
                });

            modelBuilder.Entity("BusinessObject.DeliveryTaskLog", b =>
                {
                    b.Property<int>("DeliveryTaskLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryTaskLogId"));

                    b.Property<int?>("AccountTriggerId")
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeliveryTaskId")
                        .HasColumnType("int");

                    b.HasKey("DeliveryTaskLogId");

                    b.HasIndex("AccountTriggerId");

                    b.HasIndex("DeliveryTaskId");

                    b.ToTable("DeliveryTaskLog", (string)null);
                });

            modelBuilder.Entity("BusinessObject.DigitalTransaction", b =>
                {
                    b.Property<string>("DigitalTransactionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("BankCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PayOsOrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DigitalTransactionId");

                    b.HasIndex("InvoiceId")
                        .IsUnique()
                        .HasFilter("[InvoiceId] IS NOT NULL");

                    b.ToTable("DigitalTransactions");
                });

            modelBuilder.Entity("BusinessObject.Invoice", b =>
                {
                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AccountPaidId")
                        .HasColumnType("int");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("ComponentReplacementTicketId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatePaid")
                        .HasColumnType("datetime2");

                    b.Property<string>("DigitalTransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayOsOrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InvoiceId");

                    b.HasIndex("AccountPaidId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("BusinessObject.LogDetail", b =>
                {
                    b.Property<int>("LogDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogDetailId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.HasKey("LogDetailId");

                    b.HasIndex("AccountId");

                    b.ToTable("LogDetail", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Machine", b =>
                {
                    b.Property<int>("MachineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MachineId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("MachinePrice")
                        .HasColumnType("float");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("RentPrice")
                        .HasColumnType("float");

                    b.Property<double?>("ShipPricePerKm")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("MachineId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Machine", (string)null);
                });

            modelBuilder.Entity("BusinessObject.MachineAttribute", b =>
                {
                    b.Property<int>("MachineAttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MachineAttributeId"));

                    b.Property<string>("AttributeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MachineId")
                        .HasColumnType("int");

                    b.Property<string>("Specifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MachineAttributeId");

                    b.HasIndex("MachineId");

                    b.ToTable("MachineAttribute", (string)null);
                });

            modelBuilder.Entity("BusinessObject.MachineCheckCriteria", b =>
                {
                    b.Property<int>("MachineCheckCriteriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MachineCheckCriteriaId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MachineCheckCriteriaId");

                    b.ToTable("MachineCheckCriteria", (string)null);
                });

            modelBuilder.Entity("BusinessObject.MachineCheckRequest", b =>
                {
                    b.Property<string>("MachineCheckRequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MachineTaskId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MachineCheckRequestId");

                    b.HasIndex("ContractId");

                    b.ToTable("MachineCheckRequest", (string)null);
                });

            modelBuilder.Entity("BusinessObject.MachineCheckRequestCriteria", b =>
                {
                    b.Property<int>("MachineCheckRequestCriteriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MachineCheckRequestCriteriaId"));

                    b.Property<string>("CriteriaName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineCheckRequestId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MachineCheckRequestCriteriaId");

                    b.HasIndex("MachineCheckRequestId");

                    b.ToTable("MachineCheckRequestCriteria", (string)null);
                });

            modelBuilder.Entity("BusinessObject.MachineComponent", b =>
                {
                    b.Property<int>("MachineComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MachineComponentId"));

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int");

                    b.Property<int?>("MachineId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("MachineComponentId");

                    b.HasIndex("ComponentId");

                    b.HasIndex("MachineId");

                    b.ToTable("MachineComponent", (string)null);
                });

            modelBuilder.Entity("BusinessObject.MachineImage", b =>
                {
                    b.Property<int>("MachineImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MachineImageId"));

                    b.Property<bool?>("IsThumbnail")
                        .HasColumnType("bit");

                    b.Property<int?>("MachineId")
                        .HasColumnType("int");

                    b.Property<string>("MachineImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MachineImageId");

                    b.HasIndex("MachineId");

                    b.ToTable("MachineImage", (string)null);
                });

            modelBuilder.Entity("BusinessObject.MachineSerialNumber", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("ActualRentPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MachineId")
                        .HasColumnType("int");

                    b.Property<int?>("RentDaysCounter")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SerialNumber");

                    b.HasIndex("MachineId");

                    b.ToTable("MachineSerialNumber", (string)null);
                });

            modelBuilder.Entity("BusinessObject.MachineSerialNumberComponent", b =>
                {
                    b.Property<int>("MachineSerialNumberComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MachineSerialNumberComponentId"));

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MachineComponentId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MachineSerialNumberComponentId");

                    b.HasIndex("MachineComponentId");

                    b.HasIndex("SerialNumber");

                    b.ToTable("MachineSerialNumberComponent", (string)null);
                });

            modelBuilder.Entity("BusinessObject.MachineSerialNumberLog", b =>
                {
                    b.Property<int>("MachineSerialNumberLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MachineSerialNumberLogId"));

                    b.Property<int?>("AccountTriggerId")
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MachineSerialNumberComponentId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MachineSerialNumberLogId");

                    b.HasIndex("AccountTriggerId");

                    b.HasIndex("MachineSerialNumberComponentId");

                    b.HasIndex("SerialNumber");

                    b.ToTable("MachineSerialNumberLog", (string)null);
                });

            modelBuilder.Entity("BusinessObject.MachineTask", b =>
                {
                    b.Property<int>("MachineTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MachineTaskId"));

                    b.Property<string>("ConfirmationPictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("MachineCheckRequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MachineTaskId");

                    b.HasIndex("ContractId");

                    b.HasIndex("MachineCheckRequestId")
                        .IsUnique()
                        .HasFilter("[MachineCheckRequestId] IS NOT NULL");

                    b.HasIndex("ManagerId");

                    b.HasIndex("StaffId");

                    b.ToTable("MachineTask", (string)null);
                });

            modelBuilder.Entity("BusinessObject.MachineTaskLog", b =>
                {
                    b.Property<int>("MachineTaskLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MachineTaskLogId"));

                    b.Property<int?>("AccountTriggerId")
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MachineTaskId")
                        .HasColumnType("int");

                    b.HasKey("MachineTaskLogId");

                    b.HasIndex("AccountTriggerId");

                    b.HasIndex("MachineTaskId");

                    b.ToTable("MachineTaskLog", (string)null);
                });

            modelBuilder.Entity("BusinessObject.MachineTerm", b =>
                {
                    b.Property<int>("MachineTermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MachineTermId"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MachineId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MachineTermId");

                    b.HasIndex("MachineId");

                    b.ToTable("MachineTerm", (string)null);
                });

            modelBuilder.Entity("BusinessObject.MembershipRank", b =>
                {
                    b.Property<int>("MembershipRankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MembershipRankId"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DiscountPercentage")
                        .HasColumnType("float");

                    b.Property<string>("MembershipRankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("MoneySpent")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MembershipRankId");

                    b.ToTable("MembershipRank", (string)null);
                });

            modelBuilder.Entity("BusinessObject.MembershipRankLog", b =>
                {
                    b.Property<int>("MembershipRankLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MembershipRankLogId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MembershipRankId")
                        .HasColumnType("int");

                    b.HasKey("MembershipRankLogId");

                    b.HasIndex("AccountId");

                    b.HasIndex("MembershipRankId");

                    b.ToTable("MembershipRankLog", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<int?>("AccountReceiveId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateRead")
                        .HasColumnType("datetime2");

                    b.Property<string>("DetailId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailIdName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageNotification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationId");

                    b.HasIndex("AccountReceiveId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("BusinessObject.RentingRequest", b =>
                {
                    b.Property<string>("RentingRequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AccountOrderId")
                        .HasColumnType("int");

                    b.Property<string>("BeneficiaryBank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeneficiaryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DiscountPrice")
                        .HasColumnType("float");

                    b.Property<bool?>("IsOnetimePayment")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("ShippingPrice")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<double?>("TotalDepositPrice")
                        .HasColumnType("float");

                    b.Property<double?>("TotalRentPrice")
                        .HasColumnType("float");

                    b.Property<double?>("TotalServicePrice")
                        .HasColumnType("float");

                    b.HasKey("RentingRequestId");

                    b.HasIndex("AccountOrderId");

                    b.ToTable("RentingRequest", (string)null);
                });

            modelBuilder.Entity("BusinessObject.RentingRequestAddress", b =>
                {
                    b.Property<string>("RentingRequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Coordinates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RentingRequestId");

                    b.ToTable("RentingRequestAddress", (string)null);
                });

            modelBuilder.Entity("BusinessObject.RentingService", b =>
                {
                    b.Property<int>("RentingServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RentingServiceId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsOptional")
                        .HasColumnType("bit");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("RentingServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RentingServiceId");

                    b.ToTable("RentingService", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("BusinessObject.ServiceRentingRequest", b =>
                {
                    b.Property<int>("ServiceRentingRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceRentingRequestId"));

                    b.Property<string>("RentingRequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("RentingServiceId")
                        .HasColumnType("int");

                    b.Property<double?>("ServicePrice")
                        .HasColumnType("float");

                    b.HasKey("ServiceRentingRequestId");

                    b.HasIndex("RentingRequestId");

                    b.HasIndex("RentingServiceId");

                    b.ToTable("ServiceRentingRequest", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Term", b =>
                {
                    b.Property<int>("TermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TermId"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TermId");

                    b.ToTable("Term", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Account", b =>
                {
                    b.HasOne("BusinessObject.MembershipRank", "MembershipRank")
                        .WithMany("Accounts")
                        .HasForeignKey("MembershipRankId")
                        .HasConstraintName("FK_Account_MembershipRank");

                    b.HasOne("BusinessObject.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_Account_Role");

                    b.Navigation("MembershipRank");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BusinessObject.AccountBusiness", b =>
                {
                    b.HasOne("BusinessObject.Account", "Account")
                        .WithOne("AccountBusiness")
                        .HasForeignKey("BusinessObject.AccountBusiness", "AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_AccountBusiness_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.Address", b =>
                {
                    b.HasOne("BusinessObject.Account", "Account")
                        .WithMany("Addresses")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_Address_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.ComponentReplacementTicket", b =>
                {
                    b.HasOne("BusinessObject.Component", "Component")
                        .WithMany("ComponentReplacementTickets")
                        .HasForeignKey("ComponentId")
                        .HasConstraintName("FK_ComponentReplacementTicket_ComponentID");

                    b.HasOne("BusinessObject.Contract", "Contract")
                        .WithMany("ComponentReplacementTickets")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_ComponentReplacementTicket_ContractID");

                    b.HasOne("BusinessObject.Account", "EmployeeCreate")
                        .WithMany()
                        .HasForeignKey("EmployeeCreateId");

                    b.HasOne("BusinessObject.Invoice", "Invoice")
                        .WithOne("ComponentReplacementTicket")
                        .HasForeignKey("BusinessObject.ComponentReplacementTicket", "InvoiceId")
                        .HasConstraintName("FK_Invoice_MaintainTicket");

                    b.HasOne("BusinessObject.MachineSerialNumberComponent", "MachineSerialNumberComponent")
                        .WithMany("ComponentReplacementTickets")
                        .HasForeignKey("MachineSerialNumberComponentId")
                        .HasConstraintName("FK_ComponentReplacementTicket_MachineSerialNumberComponent");

                    b.HasOne("BusinessObject.MachineTask", "MachineTaskCreate")
                        .WithMany("ComponentReplacementTicketsCreateFromTask")
                        .HasForeignKey("MachineTaskCreateId")
                        .HasConstraintName("FK_ComponentReplacementTicket_MachineTaskCreated");

                    b.Navigation("Component");

                    b.Navigation("Contract");

                    b.Navigation("EmployeeCreate");

                    b.Navigation("Invoice");

                    b.Navigation("MachineSerialNumberComponent");

                    b.Navigation("MachineTaskCreate");
                });

            modelBuilder.Entity("BusinessObject.ComponentReplacementTicketLog", b =>
                {
                    b.HasOne("BusinessObject.Account", "AccountTrigger")
                        .WithMany()
                        .HasForeignKey("AccountTriggerId");

                    b.HasOne("BusinessObject.ComponentReplacementTicket", "ComponentReplacementTicket")
                        .WithMany("ComponentReplacementTicketLogs")
                        .HasForeignKey("ComponentReplacementTicketId")
                        .HasConstraintName("FK_ComponentReplacementTicket_Log");

                    b.Navigation("AccountTrigger");

                    b.Navigation("ComponentReplacementTicket");
                });

            modelBuilder.Entity("BusinessObject.Content", b =>
                {
                    b.HasOne("BusinessObject.Account", "Account")
                        .WithMany("Contents")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_Content_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.Contract", b =>
                {
                    b.HasOne("BusinessObject.Account", "AccountSign")
                        .WithMany("Contracts")
                        .HasForeignKey("AccountSignId")
                        .HasConstraintName("FK_Contract_Account");

                    b.HasOne("BusinessObject.Contract", "BaseContract")
                        .WithOne()
                        .HasForeignKey("BusinessObject.Contract", "BaseContractId")
                        .HasConstraintName("FK_Contract_BaseContract");

                    b.HasOne("BusinessObject.RentingRequest", "RentingRequest")
                        .WithMany("Contracts")
                        .HasForeignKey("RentingRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_RentingRequest_Contract");

                    b.HasOne("BusinessObject.MachineSerialNumber", "ContractMachineSerialNumber")
                        .WithMany("Contracts")
                        .HasForeignKey("SerialNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Contract_MachineSerialNumber");

                    b.Navigation("AccountSign");

                    b.Navigation("BaseContract");

                    b.Navigation("ContractMachineSerialNumber");

                    b.Navigation("RentingRequest");
                });

            modelBuilder.Entity("BusinessObject.ContractDelivery", b =>
                {
                    b.HasOne("BusinessObject.Contract", "Contract")
                        .WithMany("ContractDeliveries")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_Contract_ContractDelivery");

                    b.HasOne("BusinessObject.DeliveryTask", "DeliveryTask")
                        .WithMany("ContractDeliveries")
                        .HasForeignKey("DeliveryTaskId")
                        .HasConstraintName("FK_DeliveryTask_ContractDelivery");

                    b.Navigation("Contract");

                    b.Navigation("DeliveryTask");
                });

            modelBuilder.Entity("BusinessObject.ContractPayment", b =>
                {
                    b.HasOne("BusinessObject.Contract", "Contract")
                        .WithMany("ContractPayments")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_ContractPayment_ContractID");

                    b.HasOne("BusinessObject.Invoice", "Invoice")
                        .WithMany("ContractPayments")
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("FK_Invoice_ContractPayment");

                    b.Navigation("Contract");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("BusinessObject.ContractTerm", b =>
                {
                    b.HasOne("BusinessObject.Contract", "Contract")
                        .WithMany("ContractTerms")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_ContractTerm_ContractID");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("BusinessObject.DeliveryTask", b =>
                {
                    b.HasOne("BusinessObject.Account", "Manager")
                        .WithMany("DeliveryTaskGaveList")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("FK_DeliveryTask_ManagerID");

                    b.HasOne("BusinessObject.Account", "Staff")
                        .WithMany("Deliveries")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_DeliveryTask_StaffID");

                    b.Navigation("Manager");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("BusinessObject.DeliveryTaskLog", b =>
                {
                    b.HasOne("BusinessObject.Account", "AccountTrigger")
                        .WithMany("DeliveryTaskLogs")
                        .HasForeignKey("AccountTriggerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_DeliveryTaskLog_AccountID");

                    b.HasOne("BusinessObject.DeliveryTask", "DeliveryTask")
                        .WithMany("DeliveryTaskLogs")
                        .HasForeignKey("DeliveryTaskId")
                        .HasConstraintName("FK_DeliveryTaskLog_DeliveryTaskID");

                    b.Navigation("AccountTrigger");

                    b.Navigation("DeliveryTask");
                });

            modelBuilder.Entity("BusinessObject.DigitalTransaction", b =>
                {
                    b.HasOne("BusinessObject.Invoice", "Invoice")
                        .WithOne("DigitalTransaction")
                        .HasForeignKey("BusinessObject.DigitalTransaction", "InvoiceId")
                        .HasConstraintName("FK_DigitalTransaction_Invoice");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("BusinessObject.Invoice", b =>
                {
                    b.HasOne("BusinessObject.Account", "AccountPaid")
                        .WithMany("Invoices")
                        .HasForeignKey("AccountPaidId")
                        .HasConstraintName("FK_Invoices_Account");

                    b.Navigation("AccountPaid");
                });

            modelBuilder.Entity("BusinessObject.LogDetail", b =>
                {
                    b.HasOne("BusinessObject.Account", "Account")
                        .WithMany("LogDetails")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_LogDetail_AccountID");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.Machine", b =>
                {
                    b.HasOne("BusinessObject.Category", "Category")
                        .WithMany("Machines")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Machine_Category");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BusinessObject.MachineAttribute", b =>
                {
                    b.HasOne("BusinessObject.Machine", "Machine")
                        .WithMany("MachineAttributes")
                        .HasForeignKey("MachineId")
                        .HasConstraintName("FK_Attribute_Machine");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("BusinessObject.MachineCheckRequest", b =>
                {
                    b.HasOne("BusinessObject.Contract", "Contract")
                        .WithMany("MachineCheckRequests")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_MachineCheckRequest_Contract");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("BusinessObject.MachineCheckRequestCriteria", b =>
                {
                    b.HasOne("BusinessObject.MachineCheckRequest", "MachineCheckRequest")
                        .WithMany("MachineCheckRequestCriterias")
                        .HasForeignKey("MachineCheckRequestId")
                        .HasConstraintName("FK_MachineCheckRequestCriteria_MachineCheckRequest");

                    b.Navigation("MachineCheckRequest");
                });

            modelBuilder.Entity("BusinessObject.MachineComponent", b =>
                {
                    b.HasOne("BusinessObject.Component", "Component")
                        .WithMany("MachineComponents")
                        .HasForeignKey("ComponentId")
                        .HasConstraintName("FK_MachineComponent_ComponentID");

                    b.HasOne("BusinessObject.Machine", "Machine")
                        .WithMany("MachineComponents")
                        .HasForeignKey("MachineId")
                        .HasConstraintName("FK_MachineComponent_MachineID");

                    b.Navigation("Component");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("BusinessObject.MachineImage", b =>
                {
                    b.HasOne("BusinessObject.Machine", "Machine")
                        .WithMany("MachineImages")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_MachineImage_Machine");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("BusinessObject.MachineSerialNumber", b =>
                {
                    b.HasOne("BusinessObject.Machine", "Machine")
                        .WithMany("MachineSerialNumbers")
                        .HasForeignKey("MachineId")
                        .HasConstraintName("FK_MachineNumber_Machine");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("BusinessObject.MachineSerialNumberComponent", b =>
                {
                    b.HasOne("BusinessObject.MachineComponent", "MachineComponent")
                        .WithMany("MachineSerialNumberComponents")
                        .HasForeignKey("MachineComponentId")
                        .HasConstraintName("FK_MachineSerialNumberComponent_ComponentID");

                    b.HasOne("BusinessObject.MachineSerialNumber", "MachineSerialNumber")
                        .WithMany("MachineSerialNumberComponents")
                        .HasForeignKey("SerialNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_MachineSerialNumberComponent_MachineSerialNumber");

                    b.Navigation("MachineComponent");

                    b.Navigation("MachineSerialNumber");
                });

            modelBuilder.Entity("BusinessObject.MachineSerialNumberLog", b =>
                {
                    b.HasOne("BusinessObject.Account", "AccountTrigger")
                        .WithMany("MachineSerialNumberLogs")
                        .HasForeignKey("AccountTriggerId")
                        .HasConstraintName("FK_MachineSerialNumberLog_AccountID");

                    b.HasOne("BusinessObject.MachineSerialNumberComponent", "MachineSerialNumberComponent")
                        .WithMany("MachineSerialNumberLogs")
                        .HasForeignKey("MachineSerialNumberComponentId")
                        .HasConstraintName("FK_MachineSerialNumberComponent_Log");

                    b.HasOne("BusinessObject.MachineSerialNumber", "MachineSerialNumber")
                        .WithMany("MachineSerialNumberLogs")
                        .HasForeignKey("SerialNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_MachineSerialNumber_Log");

                    b.Navigation("AccountTrigger");

                    b.Navigation("MachineSerialNumber");

                    b.Navigation("MachineSerialNumberComponent");
                });

            modelBuilder.Entity("BusinessObject.MachineTask", b =>
                {
                    b.HasOne("BusinessObject.Contract", "Contract")
                        .WithMany("MachineTasks")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_Task_Contract");

                    b.HasOne("BusinessObject.MachineCheckRequest", "MachineCheckRequest")
                        .WithOne("MachineTask")
                        .HasForeignKey("BusinessObject.MachineTask", "MachineCheckRequestId")
                        .HasConstraintName("FK_Task_MachineCheckRequest");

                    b.HasOne("BusinessObject.Account", "Manager")
                        .WithMany("TaskGaveList")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("FK_Task_Manager");

                    b.HasOne("BusinessObject.Account", "Staff")
                        .WithMany("TaskReceivedList")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_Task_Staff");

                    b.Navigation("Contract");

                    b.Navigation("MachineCheckRequest");

                    b.Navigation("Manager");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("BusinessObject.MachineTaskLog", b =>
                {
                    b.HasOne("BusinessObject.Account", "AccountTrigger")
                        .WithMany("MachineTaskLogs")
                        .HasForeignKey("AccountTriggerId")
                        .HasConstraintName("FK_MachineTaskLog_AccountID");

                    b.HasOne("BusinessObject.MachineTask", "MachineTask")
                        .WithMany("MachineTaskLogs")
                        .HasForeignKey("MachineTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_MachineTaskLog_TaskID");

                    b.Navigation("AccountTrigger");

                    b.Navigation("MachineTask");
                });

            modelBuilder.Entity("BusinessObject.MachineTerm", b =>
                {
                    b.HasOne("BusinessObject.Machine", "Machine")
                        .WithMany("MachineTerms")
                        .HasForeignKey("MachineId")
                        .HasConstraintName("FK_Term_Machine");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("BusinessObject.MembershipRankLog", b =>
                {
                    b.HasOne("BusinessObject.Account", "Account")
                        .WithMany("MembershipRankLogs")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_account_membershiplog");

                    b.HasOne("BusinessObject.MembershipRank", "MembershipRank")
                        .WithMany("MembershipRankLogs")
                        .HasForeignKey("MembershipRankId")
                        .HasConstraintName("FK_MembershipRank_membershiplog");

                    b.Navigation("Account");

                    b.Navigation("MembershipRank");
                });

            modelBuilder.Entity("BusinessObject.Notification", b =>
                {
                    b.HasOne("BusinessObject.Account", "AccountReceive")
                        .WithMany("Notifications")
                        .HasForeignKey("AccountReceiveId")
                        .HasConstraintName("FK_Notification_Account");

                    b.Navigation("AccountReceive");
                });

            modelBuilder.Entity("BusinessObject.RentingRequest", b =>
                {
                    b.HasOne("BusinessObject.Account", "AccountOrder")
                        .WithMany("RentingRequests")
                        .HasForeignKey("AccountOrderId")
                        .HasConstraintName("FK_RentingRequest_Account");

                    b.Navigation("AccountOrder");
                });

            modelBuilder.Entity("BusinessObject.RentingRequestAddress", b =>
                {
                    b.HasOne("BusinessObject.RentingRequest", "RentingRequest")
                        .WithOne("RentingRequestAddress")
                        .HasForeignKey("BusinessObject.RentingRequestAddress", "RentingRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_RentingRequest_RentingRequestAddress");

                    b.Navigation("RentingRequest");
                });

            modelBuilder.Entity("BusinessObject.ServiceRentingRequest", b =>
                {
                    b.HasOne("BusinessObject.RentingRequest", "RentingRequest")
                        .WithMany("ServiceRentingRequests")
                        .HasForeignKey("RentingRequestId")
                        .HasConstraintName("FK_servicerequest_rentingrequest");

                    b.HasOne("BusinessObject.RentingService", "RentingService")
                        .WithMany("ServiceRentingRequests")
                        .HasForeignKey("RentingServiceId")
                        .HasConstraintName("FK_rentingservice_servicerequest");

                    b.Navigation("RentingRequest");

                    b.Navigation("RentingService");
                });

            modelBuilder.Entity("BusinessObject.Account", b =>
                {
                    b.Navigation("AccountBusiness");

                    b.Navigation("Addresses");

                    b.Navigation("Contents");

                    b.Navigation("Contracts");

                    b.Navigation("Deliveries");

                    b.Navigation("DeliveryTaskGaveList");

                    b.Navigation("DeliveryTaskLogs");

                    b.Navigation("Invoices");

                    b.Navigation("LogDetails");

                    b.Navigation("MachineSerialNumberLogs");

                    b.Navigation("MachineTaskLogs");

                    b.Navigation("MembershipRankLogs");

                    b.Navigation("Notifications");

                    b.Navigation("RentingRequests");

                    b.Navigation("TaskGaveList");

                    b.Navigation("TaskReceivedList");
                });

            modelBuilder.Entity("BusinessObject.Category", b =>
                {
                    b.Navigation("Machines");
                });

            modelBuilder.Entity("BusinessObject.Component", b =>
                {
                    b.Navigation("ComponentReplacementTickets");

                    b.Navigation("MachineComponents");
                });

            modelBuilder.Entity("BusinessObject.ComponentReplacementTicket", b =>
                {
                    b.Navigation("ComponentReplacementTicketLogs");
                });

            modelBuilder.Entity("BusinessObject.Contract", b =>
                {
                    b.Navigation("ComponentReplacementTickets");

                    b.Navigation("ContractDeliveries");

                    b.Navigation("ContractPayments");

                    b.Navigation("ContractTerms");

                    b.Navigation("MachineCheckRequests");

                    b.Navigation("MachineTasks");
                });

            modelBuilder.Entity("BusinessObject.DeliveryTask", b =>
                {
                    b.Navigation("ContractDeliveries");

                    b.Navigation("DeliveryTaskLogs");
                });

            modelBuilder.Entity("BusinessObject.Invoice", b =>
                {
                    b.Navigation("ComponentReplacementTicket");

                    b.Navigation("ContractPayments");

                    b.Navigation("DigitalTransaction");
                });

            modelBuilder.Entity("BusinessObject.Machine", b =>
                {
                    b.Navigation("MachineAttributes");

                    b.Navigation("MachineComponents");

                    b.Navigation("MachineImages");

                    b.Navigation("MachineSerialNumbers");

                    b.Navigation("MachineTerms");
                });

            modelBuilder.Entity("BusinessObject.MachineCheckRequest", b =>
                {
                    b.Navigation("MachineCheckRequestCriterias");

                    b.Navigation("MachineTask");
                });

            modelBuilder.Entity("BusinessObject.MachineComponent", b =>
                {
                    b.Navigation("MachineSerialNumberComponents");
                });

            modelBuilder.Entity("BusinessObject.MachineSerialNumber", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("MachineSerialNumberComponents");

                    b.Navigation("MachineSerialNumberLogs");
                });

            modelBuilder.Entity("BusinessObject.MachineSerialNumberComponent", b =>
                {
                    b.Navigation("ComponentReplacementTickets");

                    b.Navigation("MachineSerialNumberLogs");
                });

            modelBuilder.Entity("BusinessObject.MachineTask", b =>
                {
                    b.Navigation("ComponentReplacementTicketsCreateFromTask");

                    b.Navigation("MachineTaskLogs");
                });

            modelBuilder.Entity("BusinessObject.MembershipRank", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("MembershipRankLogs");
                });

            modelBuilder.Entity("BusinessObject.RentingRequest", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("RentingRequestAddress");

                    b.Navigation("ServiceRentingRequests");
                });

            modelBuilder.Entity("BusinessObject.RentingService", b =>
                {
                    b.Navigation("ServiceRentingRequests");
                });

            modelBuilder.Entity("BusinessObject.Role", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
