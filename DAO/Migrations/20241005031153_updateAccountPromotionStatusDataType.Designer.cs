// <auto-generated />
using System;
using DAO;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAO.Migrations
{
    [DbContext(typeof(MmrmsContext))]
    [Migration("20241005031153_updateAccountPromotionStatusDataType")]
    partial class updateAccountPromotionStatusDataType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObject.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<int?>("AccountBusinessId")
                        .HasColumnType("int");

                    b.Property<string>("AvatarImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateExpire")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirebaseMessageToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("LogId")
                        .HasColumnType("int");

                    b.Property<int?>("MembershipRankId")
                        .HasColumnType("int");

                    b.Property<double?>("MoneySpent")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtpNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TokenDateExpire")
                        .HasColumnType("datetime2");

                    b.Property<string>("TokenRefresh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.HasIndex("MembershipRankId");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("BusinessObject.AccountBusiness", b =>
                {
                    b.Property<int>("AccountBusinessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountBusinessId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountBusinessId");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasFilter("[AccountId] IS NOT NULL");

                    b.ToTable("AccountBusiness", (string)null);
                });

            modelBuilder.Entity("BusinessObject.AccountPromotion", b =>
                {
                    b.Property<int>("AccountPromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountPromotionId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateReceive")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PromotionId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountPromotionId");

                    b.HasIndex("AccountId");

                    b.HasIndex("PromotionId");

                    b.ToTable("AccountPromotion", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("AddressBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("AddressId");

                    b.HasIndex("AccountId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Component", b =>
                {
                    b.Property<int>("ComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComponentId"));

                    b.Property<string>("ComponentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ComponentId");

                    b.ToTable("Component", (string)null);
                });

            modelBuilder.Entity("BusinessObject.ComponentProduct", b =>
                {
                    b.Property<int>("ComponentProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComponentProductId"));

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ComponentProductId");

                    b.HasIndex("ComponentId");

                    b.HasIndex("ProductId");

                    b.ToTable("ComponentProduct", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Content", b =>
                {
                    b.Property<int>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContentId"));

                    b.Property<string>("ContentBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContentId");

                    b.ToTable("Content", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Contract", b =>
                {
                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AccountCreateId")
                        .HasColumnType("int");

                    b.Property<int?>("AccountSignId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContractAddressId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("ContractName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateSign")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DiscountPrice")
                        .HasColumnType("float");

                    b.Property<double?>("DiscountShip")
                        .HasColumnType("float");

                    b.Property<double?>("FinalAmount")
                        .HasColumnType("float");

                    b.Property<string>("RentingRequestId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("ShippingPrice")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TotalDepositPrice")
                        .HasColumnType("float");

                    b.Property<double?>("TotalRentPrice")
                        .HasColumnType("float");

                    b.HasKey("ContractId");

                    b.HasIndex("AccountCreateId");

                    b.HasIndex("AccountSignId");

                    b.HasIndex("ContractAddressId")
                        .IsUnique();

                    b.HasIndex("RentingRequestId")
                        .IsUnique();

                    b.ToTable("Contract", (string)null);
                });

            modelBuilder.Entity("BusinessObject.ContractAddress", b =>
                {
                    b.Property<int>("ContractAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractAddressId"));

                    b.Property<string>("AddressBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContractAddressId");

                    b.ToTable("ContractAddress", (string)null);
                });

            modelBuilder.Entity("BusinessObject.ContractPayment", b =>
                {
                    b.Property<int>("ContractPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractPaymentId"));

                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CustomerPaidDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SystemPaidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContractPaymentId");

                    b.HasIndex("ContractId");

                    b.ToTable("ContractPayment", (string)null);
                });

            modelBuilder.Entity("BusinessObject.ContractSerialNumberProduct", b =>
                {
                    b.Property<int>("ContractSerialNumberProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractSerialNumberProductId"));

                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("DepositPrice")
                        .HasColumnType("float");

                    b.Property<double?>("RentPrice")
                        .HasColumnType("float");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ContractSerialNumberProductId");

                    b.HasIndex("ContractId");

                    b.HasIndex("SerialNumber");

                    b.ToTable("ContractSerialNumberProduct", (string)null);
                });

            modelBuilder.Entity("BusinessObject.ContractTerm", b =>
                {
                    b.Property<int>("ContractTermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractTermId"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContractTermId");

                    b.HasIndex("ContractId");

                    b.ToTable("ContractTerm", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Delivery", b =>
                {
                    b.Property<int>("DeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryId"));

                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateShip")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeliveryId");

                    b.HasIndex("ContractId");

                    b.HasIndex("StaffId");

                    b.ToTable("Delivery", (string)null);
                });

            modelBuilder.Entity("BusinessObject.DeliveryLog", b =>
                {
                    b.Property<int>("DeliveryLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryLogId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeliveryId")
                        .HasColumnType("int");

                    b.HasKey("DeliveryLogId");

                    b.HasIndex("AccountId");

                    b.HasIndex("DeliveryId");

                    b.ToTable("DeliveryLog", (string)null);
                });

            modelBuilder.Entity("BusinessObject.EmployeeTask", b =>
                {
                    b.Property<int>("EmployeeTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeTaskId"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeTaskId");

                    b.HasIndex("ContractId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("StaffId");

                    b.ToTable("EmployeeTask", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<int?>("AccountFeedbackId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedbackImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId");

                    b.HasIndex("AccountFeedbackId");

                    b.HasIndex("ContractId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Invoice", b =>
                {
                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AccountPaidId")
                        .HasColumnType("int");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<int?>("ContractPaymentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaintainTicketId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InvoiceId");

                    b.HasIndex("AccountPaidId");

                    b.HasIndex("ContractPaymentId")
                        .IsUnique()
                        .HasFilter("[ContractPaymentId] IS NOT NULL");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("BusinessObject.Log", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<int?>("AccountLogId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.HasKey("LogId");

                    b.HasIndex("AccountLogId")
                        .IsUnique()
                        .HasFilter("[AccountLogId] IS NOT NULL");

                    b.ToTable("Log", (string)null);
                });

            modelBuilder.Entity("BusinessObject.LogDetail", b =>
                {
                    b.Property<int>("LogDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogDetailId"));

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LogId")
                        .HasColumnType("int");

                    b.HasKey("LogDetailId");

                    b.HasIndex("LogId");

                    b.ToTable("LogDetail", (string)null);
                });

            modelBuilder.Entity("BusinessObject.MaintenanceRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestId");

                    b.HasIndex("ContractId");

                    b.HasIndex("SerialNumber");

                    b.ToTable("MaintenanceRequest", (string)null);
                });

            modelBuilder.Entity("BusinessObject.MaintenanceTicket", b =>
                {
                    b.Property<int>("MaintenanceTicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaintenanceTicketId"));

                    b.Property<double?>("AdditionalFee")
                        .HasColumnType("float");

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int");

                    b.Property<double?>("ComponentPrice")
                        .HasColumnType("float");

                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateRepair")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeCreateId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeTaskId")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductSerialNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("MaintenanceTicketId")
                        .HasName("PK__Maintain__76F8D53F2FA1A432");

                    b.HasIndex("ComponentId");

                    b.HasIndex("ContractId");

                    b.HasIndex("EmployeeCreateId");

                    b.HasIndex("EmployeeTaskId");

                    b.HasIndex("InvoiceId")
                        .IsUnique()
                        .HasFilter("[InvoiceId] IS NOT NULL");

                    b.HasIndex("ProductSerialNumber");

                    b.ToTable("MaintenanceTicket", (string)null);
                });

            modelBuilder.Entity("BusinessObject.MembershipRank", b =>
                {
                    b.Property<int>("MembershipRankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MembershipRankId"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DiscountPercentage")
                        .HasColumnType("float");

                    b.Property<string>("MembershipRankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("MoneySpent")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MembershipRankId");

                    b.ToTable("MembershipRank", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<int?>("AccountReceiveId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateRead")
                        .HasColumnType("datetime2");

                    b.Property<string>("LinkForward")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageNotification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationId");

                    b.HasIndex("AccountReceiveId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("ProductPrice")
                        .HasColumnType("float");

                    b.Property<double?>("RentPrice")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("BusinessObject.ProductAttribute", b =>
                {
                    b.Property<int>("ProductAttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductAttributeId"));

                    b.Property<string>("AttributeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Specifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductAttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttribute", (string)null);
                });

            modelBuilder.Entity("BusinessObject.ProductComponentStatus", b =>
                {
                    b.Property<int>("ProductComponentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductComponentStatusId"));

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductComponentStatusId");

                    b.HasIndex("ComponentId");

                    b.HasIndex("SerialNumber");

                    b.ToTable("ProductComponentStatus", (string)null);
                });

            modelBuilder.Entity("BusinessObject.ProductComponentStatusLog", b =>
                {
                    b.Property<int>("ProductComponentStatusLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductComponentStatusLogId"));

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductComponentStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductComponentStatusLogId");

                    b.HasIndex("ProductComponentStatusId");

                    b.ToTable("ProductComponentStatusLog", (string)null);
                });

            modelBuilder.Entity("BusinessObject.ProductImage", b =>
                {
                    b.Property<int>("ProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductImageId"));

                    b.Property<bool?>("IsThumbnail")
                        .HasColumnType("bit");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Promotion", b =>
                {
                    b.Property<int>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PromotionId"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("DiscountPercentage")
                        .HasColumnType("float");

                    b.Property<string>("DiscountTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PromotionId");

                    b.ToTable("Promotion", (string)null);
                });

            modelBuilder.Entity("BusinessObject.RentingRequest", b =>
                {
                    b.Property<string>("RentingRequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AccountOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("ContractId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DiscountPrice")
                        .HasColumnType("float");

                    b.Property<double?>("DiscountShip")
                        .HasColumnType("float");

                    b.Property<bool?>("IsOnetimePayment")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfMonth")
                        .HasColumnType("int");

                    b.Property<double?>("ShippingPrice")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<double?>("TotalDepositPrice")
                        .HasColumnType("float");

                    b.Property<double?>("TotalRentPrice")
                        .HasColumnType("float");

                    b.HasKey("RentingRequestId");

                    b.HasIndex("AccountOrderId");

                    b.HasIndex("AddressId");

                    b.ToTable("RentingRequest", (string)null);
                });

            modelBuilder.Entity("BusinessObject.RentingRequestProductDetail", b =>
                {
                    b.Property<int>("RentingRequestProductDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RentingRequestProductDetailId"));

                    b.Property<double?>("DepositPrice")
                        .HasColumnType("float");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<double?>("RentPrice")
                        .HasColumnType("float");

                    b.Property<string>("RentingRequestId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RentingRequestProductDetailId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RentingRequestId");

                    b.ToTable("RentingRequestProductDetail", (string)null);
                });

            modelBuilder.Entity("BusinessObject.RentingService", b =>
                {
                    b.Property<int>("RentingServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RentingServiceId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsOptional")
                        .HasColumnType("bit");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("RentingServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RentingServiceId");

                    b.ToTable("RentingService", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeTaskId")
                        .HasColumnType("int");

                    b.Property<string>("ReportContent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportId");

                    b.HasIndex("EmployeeTaskId");

                    b.ToTable("Report", (string)null);
                });

            modelBuilder.Entity("BusinessObject.RequestDateResponse", b =>
                {
                    b.Property<int>("ResponseDateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResponseDateId"));

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateResponse")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResponseDateId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestDateResponse", (string)null);
                });

            modelBuilder.Entity("BusinessObject.SerialNumberProduct", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("ActualRentPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("RentTimeCounter")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SerialNumber");

                    b.HasIndex("ProductId");

                    b.ToTable("SerialNumberProduct", (string)null);
                });

            modelBuilder.Entity("BusinessObject.ServiceRentingRequest", b =>
                {
                    b.Property<int>("ServiceRentingRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceRentingRequestId"));

                    b.Property<string>("RentingRequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("RentingServiceId")
                        .HasColumnType("int");

                    b.Property<double?>("ServicePrice")
                        .HasColumnType("float");

                    b.HasKey("ServiceRentingRequestId");

                    b.HasIndex("RentingRequestId");

                    b.HasIndex("RentingServiceId");

                    b.ToTable("ServiceRentingRequest", (string)null);
                });

            modelBuilder.Entity("BusinessObject.TaskLog", b =>
                {
                    b.Property<int>("TaskLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskLogId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeTaskId")
                        .HasColumnType("int");

                    b.HasKey("TaskLogId");

                    b.HasIndex("AccountId");

                    b.HasIndex("EmployeeTaskId");

                    b.ToTable("TaskLog", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Account", b =>
                {
                    b.HasOne("BusinessObject.MembershipRank", "MembershipRank")
                        .WithMany("Accounts")
                        .HasForeignKey("MembershipRankId")
                        .HasConstraintName("FK_Account_MembershipRank");

                    b.Navigation("MembershipRank");
                });

            modelBuilder.Entity("BusinessObject.AccountBusiness", b =>
                {
                    b.HasOne("BusinessObject.Account", "Account")
                        .WithOne("AccountBusiness")
                        .HasForeignKey("BusinessObject.AccountBusiness", "AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_AccountBusiness_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.AccountPromotion", b =>
                {
                    b.HasOne("BusinessObject.Account", "Account")
                        .WithMany("AccountPromotions")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_AccountPromotion_Account");

                    b.HasOne("BusinessObject.Promotion", "Promotion")
                        .WithMany("AccountPromotions")
                        .HasForeignKey("PromotionId")
                        .HasConstraintName("FK_AccountPromotion_Promotion");

                    b.Navigation("Account");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("BusinessObject.Address", b =>
                {
                    b.HasOne("BusinessObject.Account", "Account")
                        .WithMany("Addresses")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_Address_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.ComponentProduct", b =>
                {
                    b.HasOne("BusinessObject.Component", "Component")
                        .WithMany("ComponentProducts")
                        .HasForeignKey("ComponentId")
                        .HasConstraintName("FK_ComponentProduct_ComponentID");

                    b.HasOne("BusinessObject.Product", "Product")
                        .WithMany("ComponentProducts")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ComponentProduct_ProductID");

                    b.Navigation("Component");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BusinessObject.Contract", b =>
                {
                    b.HasOne("BusinessObject.Account", "AccountCreate")
                        .WithMany("CreateContracts")
                        .HasForeignKey("AccountCreateId")
                        .HasConstraintName("FK_Contract_Account_Create");

                    b.HasOne("BusinessObject.Account", "AccountSign")
                        .WithMany("Contracts")
                        .HasForeignKey("AccountSignId")
                        .HasConstraintName("FK_Contract_Account");

                    b.HasOne("BusinessObject.ContractAddress", "ContractAddress")
                        .WithOne("Contract")
                        .HasForeignKey("BusinessObject.Contract", "ContractAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ContractAddress_Contract");

                    b.HasOne("BusinessObject.RentingRequest", "RentingRequest")
                        .WithOne("Contract")
                        .HasForeignKey("BusinessObject.Contract", "RentingRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_RentingRequest_Contract");

                    b.Navigation("AccountCreate");

                    b.Navigation("AccountSign");

                    b.Navigation("ContractAddress");

                    b.Navigation("RentingRequest");
                });

            modelBuilder.Entity("BusinessObject.ContractPayment", b =>
                {
                    b.HasOne("BusinessObject.Contract", "Contract")
                        .WithMany("ContractPayments")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_ContractPayment_ContractID");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("BusinessObject.ContractSerialNumberProduct", b =>
                {
                    b.HasOne("BusinessObject.Contract", "Contract")
                        .WithMany("ContractSerialNumberProducts")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_SerialMechanicalMachinery_ContractID");

                    b.HasOne("BusinessObject.SerialNumberProduct", "SerialNumberProduct")
                        .WithMany("ContractSerialNumberProducts")
                        .HasForeignKey("SerialNumber")
                        .HasConstraintName("FK_SerialMechanicalMachinery_SerialNumber");

                    b.Navigation("Contract");

                    b.Navigation("SerialNumberProduct");
                });

            modelBuilder.Entity("BusinessObject.ContractTerm", b =>
                {
                    b.HasOne("BusinessObject.Contract", "Contract")
                        .WithMany("ContractTerms")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_ContractTerm_ContractID");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("BusinessObject.Delivery", b =>
                {
                    b.HasOne("BusinessObject.Contract", "Contract")
                        .WithMany("Deliveries")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_Delivery_ContractID");

                    b.HasOne("BusinessObject.Account", "Staff")
                        .WithMany("Deliveries")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_Delivery_StaffID");

                    b.Navigation("Contract");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("BusinessObject.DeliveryLog", b =>
                {
                    b.HasOne("BusinessObject.Account", "AccountTrigger")
                        .WithMany("DeliveryLogs")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_DeliveryLog_AccountID");

                    b.HasOne("BusinessObject.Delivery", "Delivery")
                        .WithMany("DeliveryLogs")
                        .HasForeignKey("DeliveryId")
                        .HasConstraintName("FK_DeliveryLog_DeliveryID");

                    b.Navigation("AccountTrigger");

                    b.Navigation("Delivery");
                });

            modelBuilder.Entity("BusinessObject.EmployeeTask", b =>
                {
                    b.HasOne("BusinessObject.Contract", "Contract")
                        .WithMany("EmployeeTasks")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_Task_Contract");

                    b.HasOne("BusinessObject.Account", "Manager")
                        .WithMany("TaskGaveList")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("FK_Task_Manager");

                    b.HasOne("BusinessObject.Account", "Staff")
                        .WithMany("TaskReceivedList")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_Task_Staff");

                    b.Navigation("Contract");

                    b.Navigation("Manager");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("BusinessObject.Feedback", b =>
                {
                    b.HasOne("BusinessObject.Account", "AccountFeedback")
                        .WithMany("Feedbacks")
                        .HasForeignKey("AccountFeedbackId")
                        .HasConstraintName("FK_Feedback_Account");

                    b.HasOne("BusinessObject.Contract", "Contract")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_Feedback_Contract");

                    b.Navigation("AccountFeedback");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("BusinessObject.Invoice", b =>
                {
                    b.HasOne("BusinessObject.Account", "AccountPaid")
                        .WithMany("Invoices")
                        .HasForeignKey("AccountPaidId")
                        .HasConstraintName("FK_Invoices_Account");

                    b.HasOne("BusinessObject.ContractPayment", "ContractPayment")
                        .WithOne("Invoice")
                        .HasForeignKey("BusinessObject.Invoice", "ContractPaymentId")
                        .HasConstraintName("FK_Invoice_ContractPayment");

                    b.Navigation("AccountPaid");

                    b.Navigation("ContractPayment");
                });

            modelBuilder.Entity("BusinessObject.Log", b =>
                {
                    b.HasOne("BusinessObject.Account", "AccountLog")
                        .WithOne("Log")
                        .HasForeignKey("BusinessObject.Log", "AccountLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Log_Account");

                    b.Navigation("AccountLog");
                });

            modelBuilder.Entity("BusinessObject.LogDetail", b =>
                {
                    b.HasOne("BusinessObject.Log", "Log")
                        .WithMany("LogDetails")
                        .HasForeignKey("LogId")
                        .HasConstraintName("FK_LogDetail_LogID");

                    b.Navigation("Log");
                });

            modelBuilder.Entity("BusinessObject.MaintenanceRequest", b =>
                {
                    b.HasOne("BusinessObject.Contract", "Contract")
                        .WithMany("MaintenanceRequests")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_MaintenanceRequest_Contract");

                    b.HasOne("BusinessObject.SerialNumberProduct", "SerialNumberProduct")
                        .WithMany("MaintenanceRequests")
                        .HasForeignKey("SerialNumber")
                        .HasConstraintName("FK_MaintenanceRequest_SerialNumberProduct");

                    b.Navigation("Contract");

                    b.Navigation("SerialNumberProduct");
                });

            modelBuilder.Entity("BusinessObject.MaintenanceTicket", b =>
                {
                    b.HasOne("BusinessObject.Component", "Component")
                        .WithMany("MaintenanceTickets")
                        .HasForeignKey("ComponentId")
                        .HasConstraintName("FK_MaintenanceTicket_ComponentID");

                    b.HasOne("BusinessObject.Contract", "Contract")
                        .WithMany("MaintenanceTickets")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_MaintenanceTicket_ContractID");

                    b.HasOne("BusinessObject.Account", "EmployeeCreate")
                        .WithMany()
                        .HasForeignKey("EmployeeCreateId");

                    b.HasOne("BusinessObject.EmployeeTask", "EmployeeTask")
                        .WithMany("MaintenanceTickets")
                        .HasForeignKey("EmployeeTaskId")
                        .HasConstraintName("FK_MaintenanceTicket_TaskID");

                    b.HasOne("BusinessObject.Invoice", "Invoice")
                        .WithOne("MaintenanceTicket")
                        .HasForeignKey("BusinessObject.MaintenanceTicket", "InvoiceId")
                        .HasConstraintName("FK_Invoice_MaintainTicket");

                    b.HasOne("BusinessObject.SerialNumberProduct", "SerialNumberProduct")
                        .WithMany("MaintenanceTickets")
                        .HasForeignKey("ProductSerialNumber")
                        .HasConstraintName("FK_MaintenanceTicket_SerialNumberProduct");

                    b.Navigation("Component");

                    b.Navigation("Contract");

                    b.Navigation("EmployeeCreate");

                    b.Navigation("EmployeeTask");

                    b.Navigation("Invoice");

                    b.Navigation("SerialNumberProduct");
                });

            modelBuilder.Entity("BusinessObject.Notification", b =>
                {
                    b.HasOne("BusinessObject.Account", "AccountReceive")
                        .WithMany("Notifications")
                        .HasForeignKey("AccountReceiveId")
                        .HasConstraintName("FK_Notification_Account");

                    b.Navigation("AccountReceive");
                });

            modelBuilder.Entity("BusinessObject.Product", b =>
                {
                    b.HasOne("BusinessObject.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Product_Category");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BusinessObject.ProductAttribute", b =>
                {
                    b.HasOne("BusinessObject.Product", "Product")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Attribute_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BusinessObject.ProductComponentStatus", b =>
                {
                    b.HasOne("BusinessObject.ComponentProduct", "Component")
                        .WithMany("ProductComponentStatuses")
                        .HasForeignKey("ComponentId")
                        .HasConstraintName("FK_ProductComponentStatus_ComponentID");

                    b.HasOne("BusinessObject.SerialNumberProduct", "SerialNumberProduct")
                        .WithMany("ProductComponentStatuses")
                        .HasForeignKey("SerialNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_ProductComponentStatus_SerialNumberProduct");

                    b.Navigation("Component");

                    b.Navigation("SerialNumberProduct");
                });

            modelBuilder.Entity("BusinessObject.ProductComponentStatusLog", b =>
                {
                    b.HasOne("BusinessObject.ProductComponentStatus", "ProductComponentStatus")
                        .WithMany("ProductComponentStatusLogs")
                        .HasForeignKey("ProductComponentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_ProductComponentStatus_Log");

                    b.Navigation("ProductComponentStatus");
                });

            modelBuilder.Entity("BusinessObject.ProductImage", b =>
                {
                    b.HasOne("BusinessObject.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_ProductImage_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BusinessObject.RentingRequest", b =>
                {
                    b.HasOne("BusinessObject.Account", "AccountOrder")
                        .WithMany("RentingRequests")
                        .HasForeignKey("AccountOrderId")
                        .HasConstraintName("FK_RentingRequest_Account");

                    b.HasOne("BusinessObject.Address", "Address")
                        .WithMany("RentingRequests")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_RentingRequest_Address");

                    b.Navigation("AccountOrder");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("BusinessObject.RentingRequestProductDetail", b =>
                {
                    b.HasOne("BusinessObject.Product", "Product")
                        .WithMany("RentingRequestProductDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_RentingRequestProductDetail_Product");

                    b.HasOne("BusinessObject.RentingRequest", "RentingRequest")
                        .WithMany("RentingRequestProductDetails")
                        .HasForeignKey("RentingRequestId")
                        .HasConstraintName("FK_RentingRequestProductDetail_RentingRequest");

                    b.Navigation("Product");

                    b.Navigation("RentingRequest");
                });

            modelBuilder.Entity("BusinessObject.Report", b =>
                {
                    b.HasOne("BusinessObject.EmployeeTask", "EmployeeTask")
                        .WithMany("Reports")
                        .HasForeignKey("EmployeeTaskId")
                        .HasConstraintName("FK_Report_TaskID");

                    b.Navigation("EmployeeTask");
                });

            modelBuilder.Entity("BusinessObject.RequestDateResponse", b =>
                {
                    b.HasOne("BusinessObject.MaintenanceRequest", "Request")
                        .WithMany("RequestDateResponses")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK_RequestDateResponse_MaintenanceRequest");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("BusinessObject.SerialNumberProduct", b =>
                {
                    b.HasOne("BusinessObject.Product", "Product")
                        .WithMany("SerialNumberProducts")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductNumber_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BusinessObject.ServiceRentingRequest", b =>
                {
                    b.HasOne("BusinessObject.RentingRequest", "RentingRequest")
                        .WithMany("ServiceRentingRequests")
                        .HasForeignKey("RentingRequestId")
                        .HasConstraintName("FK_servicerequest_rentingrequest");

                    b.HasOne("BusinessObject.RentingService", "RentingService")
                        .WithMany("ServiceRentingRequests")
                        .HasForeignKey("RentingServiceId")
                        .HasConstraintName("FK_rentingservice_servicerequest");

                    b.Navigation("RentingRequest");

                    b.Navigation("RentingService");
                });

            modelBuilder.Entity("BusinessObject.TaskLog", b =>
                {
                    b.HasOne("BusinessObject.Account", "AccountTrigger")
                        .WithMany("TaskLogs")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_TaskLog_AccountID");

                    b.HasOne("BusinessObject.EmployeeTask", "EmployeeTask")
                        .WithMany("TaskLogs")
                        .HasForeignKey("EmployeeTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_TaskLog_TaskID");

                    b.Navigation("AccountTrigger");

                    b.Navigation("EmployeeTask");
                });

            modelBuilder.Entity("BusinessObject.Account", b =>
                {
                    b.Navigation("AccountBusiness");

                    b.Navigation("AccountPromotions");

                    b.Navigation("Addresses");

                    b.Navigation("Contracts");

                    b.Navigation("CreateContracts");

                    b.Navigation("Deliveries");

                    b.Navigation("DeliveryLogs");

                    b.Navigation("Feedbacks");

                    b.Navigation("Invoices");

                    b.Navigation("Log");

                    b.Navigation("Notifications");

                    b.Navigation("RentingRequests");

                    b.Navigation("TaskGaveList");

                    b.Navigation("TaskLogs");

                    b.Navigation("TaskReceivedList");
                });

            modelBuilder.Entity("BusinessObject.Address", b =>
                {
                    b.Navigation("RentingRequests");
                });

            modelBuilder.Entity("BusinessObject.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BusinessObject.Component", b =>
                {
                    b.Navigation("ComponentProducts");

                    b.Navigation("MaintenanceTickets");
                });

            modelBuilder.Entity("BusinessObject.ComponentProduct", b =>
                {
                    b.Navigation("ProductComponentStatuses");
                });

            modelBuilder.Entity("BusinessObject.Contract", b =>
                {
                    b.Navigation("ContractPayments");

                    b.Navigation("ContractSerialNumberProducts");

                    b.Navigation("ContractTerms");

                    b.Navigation("Deliveries");

                    b.Navigation("EmployeeTasks");

                    b.Navigation("Feedbacks");

                    b.Navigation("MaintenanceRequests");

                    b.Navigation("MaintenanceTickets");
                });

            modelBuilder.Entity("BusinessObject.ContractAddress", b =>
                {
                    b.Navigation("Contract");
                });

            modelBuilder.Entity("BusinessObject.ContractPayment", b =>
                {
                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("BusinessObject.Delivery", b =>
                {
                    b.Navigation("DeliveryLogs");
                });

            modelBuilder.Entity("BusinessObject.EmployeeTask", b =>
                {
                    b.Navigation("MaintenanceTickets");

                    b.Navigation("Reports");

                    b.Navigation("TaskLogs");
                });

            modelBuilder.Entity("BusinessObject.Invoice", b =>
                {
                    b.Navigation("MaintenanceTicket");
                });

            modelBuilder.Entity("BusinessObject.Log", b =>
                {
                    b.Navigation("LogDetails");
                });

            modelBuilder.Entity("BusinessObject.MaintenanceRequest", b =>
                {
                    b.Navigation("RequestDateResponses");
                });

            modelBuilder.Entity("BusinessObject.MembershipRank", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("BusinessObject.Product", b =>
                {
                    b.Navigation("ComponentProducts");

                    b.Navigation("ProductAttributes");

                    b.Navigation("ProductImages");

                    b.Navigation("RentingRequestProductDetails");

                    b.Navigation("SerialNumberProducts");
                });

            modelBuilder.Entity("BusinessObject.ProductComponentStatus", b =>
                {
                    b.Navigation("ProductComponentStatusLogs");
                });

            modelBuilder.Entity("BusinessObject.Promotion", b =>
                {
                    b.Navigation("AccountPromotions");
                });

            modelBuilder.Entity("BusinessObject.RentingRequest", b =>
                {
                    b.Navigation("Contract");

                    b.Navigation("RentingRequestProductDetails");

                    b.Navigation("ServiceRentingRequests");
                });

            modelBuilder.Entity("BusinessObject.RentingService", b =>
                {
                    b.Navigation("ServiceRentingRequests");
                });

            modelBuilder.Entity("BusinessObject.SerialNumberProduct", b =>
                {
                    b.Navigation("ContractSerialNumberProducts");

                    b.Navigation("MaintenanceRequests");

                    b.Navigation("MaintenanceTickets");

                    b.Navigation("ProductComponentStatuses");
                });
#pragma warning restore 612, 618
        }
    }
}
