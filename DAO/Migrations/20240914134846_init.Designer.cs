// <auto-generated />
using System;
using DAO;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAO.Migrations
{
    [DbContext(typeof(MmrmsContext))]
    [Migration("20240914134846_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObject.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<int?>("ActionPromotion")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BusinessType")
                        .HasColumnType("int");

                    b.Property<string>("CitizenCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateExpire")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtpNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PromotionId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TokenDateExpire")
                        .HasColumnType("datetime2");

                    b.Property<string>("TokenRefresh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.HasIndex("PromotionId");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("BusinessObject.AccountBusiness", b =>
                {
                    b.Property<int>("AccountBusinessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountBusinessId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountBusinessId");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountBusiness", (string)null);
                });

            modelBuilder.Entity("BusinessObject.AccountPromotion", b =>
                {
                    b.Property<int>("PromotionAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PromotionAccountId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateReceive")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PromotionId")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("PromotionAccountId");

                    b.HasIndex("AccountId");

                    b.HasIndex("PromotionId");

                    b.ToTable("AccountPromotion", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("AddressId");

                    b.HasIndex("AccountId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Component", b =>
                {
                    b.Property<int>("ComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComponentId"));

                    b.Property<string>("ComponentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ComponentId");

                    b.ToTable("Component", (string)null);
                });

            modelBuilder.Entity("BusinessObject.ComponentProduct", b =>
                {
                    b.Property<int>("ComponentProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComponentProductId"));

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ComponentProductId");

                    b.HasIndex("ComponentId");

                    b.HasIndex("ProductId");

                    b.ToTable("ComponentProduct", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Content", b =>
                {
                    b.Property<int>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContentId"));

                    b.Property<int?>("AccountCreateId")
                        .HasColumnType("int");

                    b.Property<string>("Content1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContentId");

                    b.HasIndex("AccountCreateId");

                    b.ToTable("Content", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Contract", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractId"));

                    b.Property<int?>("AccountSignId")
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("ContractName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateSign")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DiscountPrice")
                        .HasColumnType("float");

                    b.Property<double?>("FinalPrice")
                        .HasColumnType("float");

                    b.Property<int?>("Method")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<double?>("ShippingPrice")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContractId");

                    b.HasIndex("AccountSignId");

                    b.HasIndex("AddressId");

                    b.ToTable("Contract", (string)null);
                });

            modelBuilder.Entity("BusinessObject.ContractPayment", b =>
                {
                    b.Property<int>("ContractPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractPaymentId"));

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CustomerPaidDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SystemPaidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContractPaymentId");

                    b.HasIndex("ContractId");

                    b.ToTable("ContractPayment", (string)null);
                });

            modelBuilder.Entity("BusinessObject.ContractSerialNumberProduct", b =>
                {
                    b.Property<int>("ContractSerialNumberProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractSerialNumberProductId"));

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ContractSerialNumberProductId");

                    b.HasIndex("ContractId");

                    b.HasIndex("SerialNumber");

                    b.ToTable("ContractSerialNumberProduct", (string)null);
                });

            modelBuilder.Entity("BusinessObject.ContractTerm", b =>
                {
                    b.Property<int>("ContractTermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractTermId"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContractTermId");

                    b.HasIndex("ContractId");

                    b.ToTable("ContractTerm", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Delivery", b =>
                {
                    b.Property<int>("DeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryId"));

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateShip")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeliveryId");

                    b.HasIndex("ContractId");

                    b.HasIndex("StaffId");

                    b.ToTable("Delivery", (string)null);
                });

            modelBuilder.Entity("BusinessObject.DiscountType", b =>
                {
                    b.Property<int>("DiscountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountTypeId"));

                    b.Property<string>("DiscountTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiscountTypeId");

                    b.ToTable("DiscountType", (string)null);
                });

            modelBuilder.Entity("BusinessObject.EmployeeTask", b =>
                {
                    b.Property<int>("EmployeeTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeTaskId"));

                    b.Property<int?>("AssigneeId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReporterId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaskType")
                        .HasColumnType("int");

                    b.HasKey("EmployeeTaskId");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("ContractId");

                    b.HasIndex("ReporterId");

                    b.ToTable("Task", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<int?>("AccountFeedbackId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedbackImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId");

                    b.HasIndex("AccountFeedbackId");

                    b.HasIndex("ContractId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("BusinessObject.HiringRequest", b =>
                {
                    b.Property<int>("HiringRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HiringRequestId"));

                    b.Property<int?>("AccountOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HiringRequestId");

                    b.HasIndex("AccountOrderId");

                    b.HasIndex("AddressId");

                    b.ToTable("HiringRequest", (string)null);
                });

            modelBuilder.Entity("BusinessObject.HiringRequestProductDetail", b =>
                {
                    b.Property<int>("HiringRequestProductDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HiringRequestProductDetailId"));

                    b.Property<int?>("HiringRequestId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("HiringRequestProductDetailId");

                    b.HasIndex("HiringRequestId");

                    b.HasIndex("ProductId");

                    b.ToTable("HiringRequestProductDetail", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("Method")
                        .HasColumnType("int");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.HasKey("InvoiceId");

                    b.HasIndex("ContractId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("BusinessObject.Log", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<int?>("AccountLogId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.HasKey("LogId");

                    b.HasIndex("AccountLogId");

                    b.ToTable("Log", (string)null);
                });

            modelBuilder.Entity("BusinessObject.LogDetail", b =>
                {
                    b.Property<int>("LogDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogDetailId"));

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LogId")
                        .HasColumnType("int");

                    b.HasKey("LogDetailId");

                    b.HasIndex("LogId");

                    b.ToTable("LogDetail", (string)null);
                });

            modelBuilder.Entity("BusinessObject.MaintainingTicket", b =>
                {
                    b.Property<int>("MaintainingTicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaintainingTicketId"));

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateRepair")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeTaskId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductSerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumberProductSerialNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("MaintainingTicketId")
                        .HasName("PK__Maintain__76F8D53F2FA1A432");

                    b.HasIndex("ComponentId");

                    b.HasIndex("EmployeeTaskId");

                    b.HasIndex("SerialNumberProductSerialNumber");

                    b.ToTable("MaintainingTicket", (string)null);
                });

            modelBuilder.Entity("BusinessObject.MaintenanceRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestId");

                    b.HasIndex("ContractId");

                    b.HasIndex("SerialNumber");

                    b.ToTable("MaintenanceRequest", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<int?>("AccountReceiveId")
                        .HasColumnType("int");

                    b.Property<string>("LinkForward")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageNotification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotificationType")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationId");

                    b.HasIndex("AccountReceiveId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("BusinessObject.ProductAttribute", b =>
                {
                    b.Property<int>("ProductAttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductAttributeId"));

                    b.Property<string>("AttributeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Specifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductAttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("Attribute", (string)null);
                });

            modelBuilder.Entity("BusinessObject.ProductComponentStatus", b =>
                {
                    b.Property<int>("ProductComponentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductComponentStatusId"));

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("ProductComponentStatusId");

                    b.HasIndex("ComponentId");

                    b.HasIndex("SerialNumber");

                    b.ToTable("ProductComponentStatus", (string)null);
                });

            modelBuilder.Entity("BusinessObject.ProductImage", b =>
                {
                    b.Property<int>("ProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductImageId"));

                    b.Property<bool?>("IsThumbnail")
                        .HasColumnType("bit");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Promotion", b =>
                {
                    b.Property<int>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PromotionId"));

                    b.Property<int?>("ActionPromotion")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DiscountPercentage")
                        .HasColumnType("float");

                    b.Property<int?>("DiscountTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PromotionPack")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PromotionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PromotionId");

                    b.HasIndex("DiscountTypeId");

                    b.HasIndex("PromotionTypeId");

                    b.ToTable("Promotion", (string)null);
                });

            modelBuilder.Entity("BusinessObject.PromotionType", b =>
                {
                    b.Property<int>("PromotionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PromotionTypeId"));

                    b.Property<string>("PromotionTypeName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PromotionTypeId");

                    b.ToTable("PromotionType", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeTaskId")
                        .HasColumnType("int");

                    b.Property<string>("ReportContent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportId");

                    b.HasIndex("EmployeeTaskId");

                    b.ToTable("Report", (string)null);
                });

            modelBuilder.Entity("BusinessObject.RequestDateResponse", b =>
                {
                    b.Property<int>("ResponseDateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResponseDateId"));

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateResponse")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResponseDateId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestDateResponse", (string)null);
                });

            modelBuilder.Entity("BusinessObject.SerialNumberProduct", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SerialNumber");

                    b.HasIndex("ProductId");

                    b.ToTable("SerialNumberProduct", (string)null);
                });

            modelBuilder.Entity("BusinessObject.TaskLog", b =>
                {
                    b.Property<int>("TaskLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskLogId"));

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeTaskId")
                        .HasColumnType("int");

                    b.HasKey("TaskLogId");

                    b.HasIndex("EmployeeTaskId");

                    b.ToTable("TaskLog", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Account", b =>
                {
                    b.HasOne("BusinessObject.Promotion", "Promotion")
                        .WithMany("Accounts")
                        .HasForeignKey("PromotionId")
                        .HasConstraintName("FK_Account_Promotion");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("BusinessObject.AccountBusiness", b =>
                {
                    b.HasOne("BusinessObject.Account", "Account")
                        .WithMany("AccountBusinesses")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_AccountBusiness_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.AccountPromotion", b =>
                {
                    b.HasOne("BusinessObject.Account", "Account")
                        .WithMany("AccountPromotions")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_AccountPromotion_Account");

                    b.HasOne("BusinessObject.Promotion", "Promotion")
                        .WithMany("AccountPromotions")
                        .HasForeignKey("PromotionId")
                        .HasConstraintName("FK_AccountPromotion_Promotion");

                    b.Navigation("Account");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("BusinessObject.Address", b =>
                {
                    b.HasOne("BusinessObject.Account", "Account")
                        .WithMany("Addresses")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_Address_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.ComponentProduct", b =>
                {
                    b.HasOne("BusinessObject.Component", "Component")
                        .WithMany("ComponentProducts")
                        .HasForeignKey("ComponentId")
                        .HasConstraintName("FK_ComponentProduct_ComponentID");

                    b.HasOne("BusinessObject.Product", "Product")
                        .WithMany("ComponentProducts")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ComponentProduct_ProductID");

                    b.Navigation("Component");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BusinessObject.Content", b =>
                {
                    b.HasOne("BusinessObject.Account", "AccountCreate")
                        .WithMany("Contents")
                        .HasForeignKey("AccountCreateId")
                        .HasConstraintName("FK_Content_Account");

                    b.Navigation("AccountCreate");
                });

            modelBuilder.Entity("BusinessObject.Contract", b =>
                {
                    b.HasOne("BusinessObject.Account", "AccountSign")
                        .WithMany("Contracts")
                        .HasForeignKey("AccountSignId")
                        .HasConstraintName("FK_Contract_Account");

                    b.HasOne("BusinessObject.Address", "Address")
                        .WithMany("Contracts")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_Contract_Address");

                    b.Navigation("AccountSign");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("BusinessObject.ContractPayment", b =>
                {
                    b.HasOne("BusinessObject.Contract", "Contract")
                        .WithMany("ContractPayments")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_ContractPayment_ContractID");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("BusinessObject.ContractSerialNumberProduct", b =>
                {
                    b.HasOne("BusinessObject.Contract", "Contract")
                        .WithMany("ContractSerialNumberProducts")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_SerialMechanicalMachinery_ContractID");

                    b.HasOne("BusinessObject.SerialNumberProduct", "SerialNumberProduct")
                        .WithMany("ContractSerialNumberProducts")
                        .HasForeignKey("SerialNumber")
                        .HasConstraintName("FK_SerialMechanicalMachinery_SerialNumber");

                    b.Navigation("Contract");

                    b.Navigation("SerialNumberProduct");
                });

            modelBuilder.Entity("BusinessObject.ContractTerm", b =>
                {
                    b.HasOne("BusinessObject.Contract", "Contract")
                        .WithMany("ContractTerms")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_ContractTerm_ContractID");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("BusinessObject.Delivery", b =>
                {
                    b.HasOne("BusinessObject.Contract", "Contract")
                        .WithMany("Deliveries")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_Delivery_ContractID");

                    b.HasOne("BusinessObject.Account", "Staff")
                        .WithMany("Deliveries")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_Delivery_StaffID");

                    b.Navigation("Contract");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("BusinessObject.EmployeeTask", b =>
                {
                    b.HasOne("BusinessObject.Account", "Assignee")
                        .WithMany("TaskAssignees")
                        .HasForeignKey("AssigneeId")
                        .HasConstraintName("FK_Task_Assignee");

                    b.HasOne("BusinessObject.Contract", "Contract")
                        .WithMany("EmployeeTasks")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_Task_Contract");

                    b.HasOne("BusinessObject.Account", "Reporter")
                        .WithMany("TaskReporters")
                        .HasForeignKey("ReporterId")
                        .HasConstraintName("FK_Task_Reporter");

                    b.Navigation("Assignee");

                    b.Navigation("Contract");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("BusinessObject.Feedback", b =>
                {
                    b.HasOne("BusinessObject.Account", "AccountFeedback")
                        .WithMany("Feedbacks")
                        .HasForeignKey("AccountFeedbackId")
                        .HasConstraintName("FK_Feedback_Account");

                    b.HasOne("BusinessObject.Contract", "Contract")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_Feedback_Contract");

                    b.Navigation("AccountFeedback");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("BusinessObject.HiringRequest", b =>
                {
                    b.HasOne("BusinessObject.Account", "AccountOrder")
                        .WithMany("HiringRequests")
                        .HasForeignKey("AccountOrderId")
                        .HasConstraintName("FK_HiringRequest_Account");

                    b.HasOne("BusinessObject.Address", "Address")
                        .WithMany("HiringRequests")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_HiringRequest_Address");

                    b.Navigation("AccountOrder");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("BusinessObject.HiringRequestProductDetail", b =>
                {
                    b.HasOne("BusinessObject.HiringRequest", "HiringRequest")
                        .WithMany("HiringRequestProductDetails")
                        .HasForeignKey("HiringRequestId")
                        .HasConstraintName("FK_HiringRequestProductDetail_HiringRequest");

                    b.HasOne("BusinessObject.Product", "Product")
                        .WithMany("HiringRequestProductDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_HiringRequestProductDetail_Product");

                    b.Navigation("HiringRequest");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BusinessObject.Invoice", b =>
                {
                    b.HasOne("BusinessObject.Contract", "Contract")
                        .WithMany("Invoices")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_Invoices_Contract");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("BusinessObject.Log", b =>
                {
                    b.HasOne("BusinessObject.Account", "AccountLog")
                        .WithMany("Logs")
                        .HasForeignKey("AccountLogId")
                        .HasConstraintName("FK_Log_AccountLogID");

                    b.Navigation("AccountLog");
                });

            modelBuilder.Entity("BusinessObject.LogDetail", b =>
                {
                    b.HasOne("BusinessObject.Log", "Log")
                        .WithMany("LogDetails")
                        .HasForeignKey("LogId")
                        .HasConstraintName("FK_LogDetail_LogID");

                    b.Navigation("Log");
                });

            modelBuilder.Entity("BusinessObject.MaintainingTicket", b =>
                {
                    b.HasOne("BusinessObject.Component", "Component")
                        .WithMany("MaintainingTickets")
                        .HasForeignKey("ComponentId")
                        .HasConstraintName("FK_MaintainingTicket_ComponentID");

                    b.HasOne("BusinessObject.EmployeeTask", "EmployeeTask")
                        .WithMany("MaintainingTickets")
                        .HasForeignKey("EmployeeTaskId")
                        .HasConstraintName("FK_MaintainingTicket_TaskID");

                    b.HasOne("BusinessObject.SerialNumberProduct", "SerialNumberProduct")
                        .WithMany()
                        .HasForeignKey("SerialNumberProductSerialNumber");

                    b.Navigation("Component");

                    b.Navigation("EmployeeTask");

                    b.Navigation("SerialNumberProduct");
                });

            modelBuilder.Entity("BusinessObject.MaintenanceRequest", b =>
                {
                    b.HasOne("BusinessObject.Contract", "Contract")
                        .WithMany("MaintenanceRequests")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_MaintenanceRequest_Contract");

                    b.HasOne("BusinessObject.SerialNumberProduct", "SerialNumberProduct")
                        .WithMany("MaintenanceRequests")
                        .HasForeignKey("SerialNumber")
                        .HasConstraintName("FK_MaintenanceRequest_SerialNumberProduct");

                    b.Navigation("Contract");

                    b.Navigation("SerialNumberProduct");
                });

            modelBuilder.Entity("BusinessObject.Notification", b =>
                {
                    b.HasOne("BusinessObject.Account", "AccountReceive")
                        .WithMany("Notifications")
                        .HasForeignKey("AccountReceiveId")
                        .HasConstraintName("FK_Notification_Account");

                    b.Navigation("AccountReceive");
                });

            modelBuilder.Entity("BusinessObject.Product", b =>
                {
                    b.HasOne("BusinessObject.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Product_Category");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BusinessObject.ProductAttribute", b =>
                {
                    b.HasOne("BusinessObject.Product", "Product")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Attribute_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BusinessObject.ProductComponentStatus", b =>
                {
                    b.HasOne("BusinessObject.ComponentProduct", "Component")
                        .WithMany("ProductComponentStatuses")
                        .HasForeignKey("ComponentId")
                        .HasConstraintName("FK_ProductComponentStatus_ComponentID");

                    b.HasOne("BusinessObject.SerialNumberProduct", "SerialNumberProduct")
                        .WithMany("ProductComponentStatuses")
                        .HasForeignKey("SerialNumber")
                        .HasConstraintName("FK_ProductComponentStatus_SerialNumberProduct");

                    b.Navigation("Component");

                    b.Navigation("SerialNumberProduct");
                });

            modelBuilder.Entity("BusinessObject.ProductImage", b =>
                {
                    b.HasOne("BusinessObject.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductImage_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BusinessObject.Promotion", b =>
                {
                    b.HasOne("BusinessObject.DiscountType", "DiscountType")
                        .WithMany("Promotions")
                        .HasForeignKey("DiscountTypeId")
                        .HasConstraintName("FK_Promotion_DiscountTypeID");

                    b.HasOne("BusinessObject.PromotionType", "PromotionType")
                        .WithMany("Promotions")
                        .HasForeignKey("PromotionTypeId")
                        .HasConstraintName("FK_Promotion_PromotionTypeID");

                    b.Navigation("DiscountType");

                    b.Navigation("PromotionType");
                });

            modelBuilder.Entity("BusinessObject.Report", b =>
                {
                    b.HasOne("BusinessObject.EmployeeTask", "EmployeeTask")
                        .WithMany("Reports")
                        .HasForeignKey("EmployeeTaskId")
                        .HasConstraintName("FK_Report_TaskID");

                    b.Navigation("EmployeeTask");
                });

            modelBuilder.Entity("BusinessObject.RequestDateResponse", b =>
                {
                    b.HasOne("BusinessObject.MaintenanceRequest", "Request")
                        .WithMany("RequestDateResponses")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK_RequestDateResponse_MaintenanceRequest");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("BusinessObject.SerialNumberProduct", b =>
                {
                    b.HasOne("BusinessObject.Product", "Product")
                        .WithMany("ProductNumbers")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductNumber_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BusinessObject.TaskLog", b =>
                {
                    b.HasOne("BusinessObject.EmployeeTask", "EmployeeTask")
                        .WithMany("TaskLogs")
                        .HasForeignKey("EmployeeTaskId")
                        .HasConstraintName("FK_TaskLog_TaskID");

                    b.Navigation("EmployeeTask");
                });

            modelBuilder.Entity("BusinessObject.Account", b =>
                {
                    b.Navigation("AccountBusinesses");

                    b.Navigation("AccountPromotions");

                    b.Navigation("Addresses");

                    b.Navigation("Contents");

                    b.Navigation("Contracts");

                    b.Navigation("Deliveries");

                    b.Navigation("Feedbacks");

                    b.Navigation("HiringRequests");

                    b.Navigation("Logs");

                    b.Navigation("Notifications");

                    b.Navigation("TaskAssignees");

                    b.Navigation("TaskReporters");
                });

            modelBuilder.Entity("BusinessObject.Address", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("HiringRequests");
                });

            modelBuilder.Entity("BusinessObject.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BusinessObject.Component", b =>
                {
                    b.Navigation("ComponentProducts");

                    b.Navigation("MaintainingTickets");
                });

            modelBuilder.Entity("BusinessObject.ComponentProduct", b =>
                {
                    b.Navigation("ProductComponentStatuses");
                });

            modelBuilder.Entity("BusinessObject.Contract", b =>
                {
                    b.Navigation("ContractPayments");

                    b.Navigation("ContractSerialNumberProducts");

                    b.Navigation("ContractTerms");

                    b.Navigation("Deliveries");

                    b.Navigation("EmployeeTasks");

                    b.Navigation("Feedbacks");

                    b.Navigation("Invoices");

                    b.Navigation("MaintenanceRequests");
                });

            modelBuilder.Entity("BusinessObject.DiscountType", b =>
                {
                    b.Navigation("Promotions");
                });

            modelBuilder.Entity("BusinessObject.EmployeeTask", b =>
                {
                    b.Navigation("MaintainingTickets");

                    b.Navigation("Reports");

                    b.Navigation("TaskLogs");
                });

            modelBuilder.Entity("BusinessObject.HiringRequest", b =>
                {
                    b.Navigation("HiringRequestProductDetails");
                });

            modelBuilder.Entity("BusinessObject.Log", b =>
                {
                    b.Navigation("LogDetails");
                });

            modelBuilder.Entity("BusinessObject.MaintenanceRequest", b =>
                {
                    b.Navigation("RequestDateResponses");
                });

            modelBuilder.Entity("BusinessObject.Product", b =>
                {
                    b.Navigation("ComponentProducts");

                    b.Navigation("HiringRequestProductDetails");

                    b.Navigation("ProductAttributes");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductNumbers");
                });

            modelBuilder.Entity("BusinessObject.Promotion", b =>
                {
                    b.Navigation("AccountPromotions");

                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("BusinessObject.PromotionType", b =>
                {
                    b.Navigation("Promotions");
                });

            modelBuilder.Entity("BusinessObject.SerialNumberProduct", b =>
                {
                    b.Navigation("ContractSerialNumberProducts");

                    b.Navigation("MaintenanceRequests");

                    b.Navigation("ProductComponentStatuses");
                });
#pragma warning restore 612, 618
        }
    }
}
